<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.collibra.com/apiv2">
  <collaboration id="Collaboration">
    <participant id="edit_request_assets_access" name="Edit Request Assets Access" processRef="EditRequestDataSetsAccess"></participant>
  </collaboration>
  <message id="gatewayMessageId" name="connectEvent"></message>
  <process id="EditRequestDataSetsAccess" name="Edit Request Assets Access" isExecutable="true">
    <documentation>[Elsevier] Use this flow to request access to all assets referenced in this shopping cart. The owners of the related data will have to approve the request.</documentation>
    <laneSet id="laneSet_EditRequestDataSetsAccess">
      <lane id="lane1" name="Requester">
        <flowNodeRef>startevent1</flowNodeRef>
        <flowNodeRef>init_variables</flowNodeRef>
        <flowNodeRef>data_access_ticket</flowNodeRef>
        <flowNodeRef>endevent5</flowNodeRef>
        <flowNodeRef>boundarytimer1</flowNodeRef>
        <flowNodeRef>approval_process</flowNodeRef>
        <flowNodeRef>exclusivegateway5</flowNodeRef>
        <flowNodeRef>exclusivegateway6</flowNodeRef>
        <flowNodeRef>validate_with_pii</flowNodeRef>
        <flowNodeRef>dataSetAccessRequestPII</flowNodeRef>
        <flowNodeRef>validate_without_pii</flowNodeRef>
        <flowNodeRef>dataSetAccessRequest</flowNodeRef>
        <flowNodeRef>exclusivegateway4</flowNodeRef>
        <flowNodeRef>init_variables_loop</flowNodeRef>
        <flowNodeRef>create_message</flowNodeRef>
        <flowNodeRef>changeAttributes</flowNodeRef>
      </lane>
    </laneSet>
    <startEvent id="startevent1" name="Start" activiti:initiator="requester" activiti:formKey="create_data_set_usage_request">
      <extensionElements>
        <activiti:formProperty id="instructions" name="Instructions" type="plainText" default="This flow will guide you through the assets access request process. The information you fill in on the following form(s) will be used to review and evaluate your request. Click Start to begin." writable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="start" name="Start" type="button" default="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="inProgressStatusTypeUuid" name="In Progress Status Type UUID" type="string" default="00000000-0000-0000-0000-000000005019" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="candidateStatusTypeUuid" name="Candidate Status Type UUID" default="00000000-0000-0000-0000-000000005008" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="assetIsEssentialForDataUsageRelationTypeUuid" name="Asset Is Essential For Data Usage Relation Type UUID" type="string" default="00000000-0000-0000-0000-000000007061" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="dataAssetGroupsDataAssetRelationTypeUuid" name="Data Asset Groups Data Asset Relation Type UUID" type="string" default="00000000-0000-0000-0000-000000007017" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="reportAssetTypeUuid" name="Report Asset Type UUID" type="string" default="00000000-0000-0000-0000-000000031102" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="dataSetAssetTypeUuid" name="Data Set Asset Type UUID" type="string" default="00000000-0000-0000-0001-000400000001" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="requesterRoleTypeUuid" name="Requester Role Type UUID" type="string" default="00000000-0000-0000-0000-000000005033" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="effectiveStartDateAttributeTypeUuid" name="Effective Start Date Attribute Type UUID" type="string" default="00000000-0000-0000-0000-000000000257" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="effectiveEndDataAttributeTypeUuid" name="Effective End Data Attribute Type UUID" type="string" default="00000000-0000-0000-0000-000000000254" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="businessUnitAffiliationAttributeTypeUuid" name="Business Unit Affiliation Attribute Type UUID" type="string" default="bfbbb62e-2768-448c-a81d-769ad258bc4e" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="roleAttributeTypeUuid" name="Role Attribute Type UUID" type="string" default="27d56e0c-579b-461b-8e90-1d64713f5422" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="approvalPendingStatusTypeUuid" name="Approval Pending Status Type UUID" type="string" default="00000000-0000-0000-0000-000000005023" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="submittedForApprovalStatusTypeUuid" name="Submitted For Approval Status Type UUID" type="string" default="00000000-0000-0000-0000-000000005060" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="uuid_data_request_ticket" name="Please fill in the UUID of the custom asset type 'Data Request Ticket'" type="string" default="6386dce2-b559-49d4-b4e7-cd9f3f9b561d" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="purpose_for_access" name="Please fill in the UUID of the attribute 'Purpose For Access'" type="string" default="90473311-db98-4782-b36f-65ce9b3787b4" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="uuid_business_justification" name="Please fill int he UUID of the attribute 'Business Justification'" type="string" default="5304d06a-31da-4511-9f7b-a5fb3aac07fa" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="uuid_business_justification_pii" name="Please fill int he UUID for the attribute 'Business Justification PII'" type="string" default="1655f7e2-a6be-4c7f-8f10-74ff7b5b1b51" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="uuid_used_tools" name="Please fill in the UUID of the asset type: Tools I am planning to use" type="string" default="410f7021-90c0-458d-922b-11a2cf05bf75" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="uuid_access_with_pii" name="Please fill in the UUID of the attribute 'Access with PII'" type="string" default="9e0117c4-ad17-458b-93fc-ba4d1547e058" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="uuid_data_helpdesk_view" name="Please fill in the UUID of the view created for data reqeust tickets in the helpdesk" type="string" default="da8df5f1-d457-4293-bb60-a7a5d3de5430" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="uuid_applies_to_governed_by_relation" name="Please fill in the UUID of the relation Governance Asset applies to - governed by data asset" type="string" default="8743ad03-b04b-493f-85b6-4d13c4e824a3" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="uuid_policy_covers_pii" name="Please fill in the UUID of the attribute Policy Covers PII" type="string" default="5c7f92c4-6575-4e7d-bb7b-036218010888" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="uuid_data_owner_responsibility" name="Please fill in the UUID of the responsibility Data Owner" type="string" default="433308b4-dbe0-40af-95d7-b34ad207abbe" readable="false" required="true"></activiti:formProperty>
        <activiti:formProperty id="uuid_relation_include_pii_column" name="Please fill in the UUID of the relation -includes PII column-" type="string" default="f979adb6-68ab-474e-bf3c-80eaaef189dd" readable="false" required="true"></activiti:formProperty>
      </extensionElements>
    </startEvent>
    <scriptTask id="init_variables" name="Init Variables" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>import com.collibra.dgc.core.api.dto.instance.relation.FindRelationsRequest

loggerApi.info("Init variables: Started")

//get ticket_id
newIssueUuid = item.id

//get dataset related to the ticket
def existingRelations = relationApi.findRelations(FindRelationsRequest.builder()
															.relationTypeId(string2Uuid("00000000-0000-0000-0000-000000007015"))
															.targetId(newIssueUuid)
															.build()
															).getResults()
															
loggerApi.info("existingRelations:" + existingRelations)
															
															
if (existingRelations)
{
	dataset = existingRelations.get(0).getSource().getId()
	loggerApi.info("--dataset:" + dataset)
	execution.setVariable("dataset", dataset)
}

execution.setVariable("newIssueUuid", newIssueUuid)
	
loggerApi.info("Init variables: Ended")</script>
    </scriptTask>
    <sequenceFlow id="flow66" sourceRef="startevent1" targetRef="init_variables"></sequenceFlow>
    <userTask id="data_access_ticket" name="Data Access Ticket" activiti:candidateUsers="user(${requester})">
      <documentation>${message}</documentation>
      <extensionElements>
        <activiti:formProperty id="close" name="Close" type="button"></activiti:formProperty>
      </extensionElements>
    </userTask>
    <endEvent id="endevent5" name="End"></endEvent>
    <sequenceFlow id="flow117" sourceRef="data_access_ticket" targetRef="endevent5"></sequenceFlow>
    <boundaryEvent id="boundarytimer1" name="Timer" attachedToRef="data_access_ticket" cancelActivity="true">
      <timerEventDefinition>
        <timeDuration>PT300S</timeDuration>
      </timerEventDefinition>
    </boundaryEvent>
    <sequenceFlow id="flow119" sourceRef="boundarytimer1" targetRef="endevent5"></sequenceFlow>
    <scriptTask id="approval_process" name="Approval Process" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>import com.collibra.dgc.core.api.model.workflow.WorkflowBusinessItemType

loggerApi.info("&lt;&lt;Approval Process: Start")


def add_access = "skip"


if (binding.hasVariable("dynamic_pii_column_checkbox"))
	if (dynamic_pii_column_checkbox)
	{
		workflowInstanceApi.startWorkflowInstances(builders.get("StartWorkflowInstancesRequest")
			.businessItemIds([newIssueUuid])
			.businessItemType(WorkflowBusinessItemType.valueOf("ASSET"))
			.workflowDefinitionId(workflowDefinitionApi.getWorkflowDefinitionByProcessId("data_request_ticket_approval").getId())
			.formProperties([requester: requester, dataset: dataset, add_access: add_access,  newIssueUuid: newIssueUuid, dataOwner: dataOwner, chk_pii: true])
			.build())
		
		loggerApi.info("-----PII!: " + dataset)
	}
	else
	{
		workflowInstanceApi.startWorkflowInstances(builders.get("StartWorkflowInstancesRequest")
			.businessItemIds([newIssueUuid])
			.businessItemType(WorkflowBusinessItemType.valueOf("ASSET"))
			.workflowDefinitionId(workflowDefinitionApi.getWorkflowDefinitionByProcessId("data_request_ticket_approval").getId())
			.formProperties([requester: requester, dataset: dataset, add_access: add_access,  newIssueUuid: newIssueUuid, dataOwner: dataOwner, chk_pii: false])
			.build())
		
		loggerApi.info("-----NO PII!: " + dataset)
	}
else
{
	workflowInstanceApi.startWorkflowInstances(builders.get("StartWorkflowInstancesRequest")
		.businessItemIds([newIssueUuid])
		.businessItemType(WorkflowBusinessItemType.valueOf("ASSET"))
		.workflowDefinitionId(workflowDefinitionApi.getWorkflowDefinitionByProcessId("data_request_ticket_approval").getId())
		.formProperties([requester: requester, dataset: dataset, add_access: add_access,  newIssueUuid: newIssueUuid, dataOwner: dataOwner, chk_pii: false])
		.build())
	
	loggerApi.info("-----NO PII!: " + dataset)
	
}



//Since this parameter is important to see if an apprval is needed, to be sure we clean it up after every loop
execution.setVariable("dynamic_pii_column_checkbox", [])


loggerApi.info("&lt;&lt;Approval Process: End")
</script>
    </scriptTask>
    <scriptTask id="changeAttributes" name="Change Attributes" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>import com.collibra.dgc.core.api.model.instance.Asset
import com.collibra.dgc.core.api.dto.instance.attribute.AddAttributeRequest
import com.collibra.dgc.core.api.dto.instance.asset.ChangeAssetRequest
import com.collibra.dgc.core.api.dto.instance.relation.AddRelationRequest
import com.collibra.dgc.core.api.dto.instance.attribute.FindAttributesRequest
import com.collibra.dgc.core.api.dto.instance.attribute.ChangeAttributeRequest
import com.collibra.dgc.core.api.dto.instance.relation.FindRelationsRequest
//import com.collibra.dgc.core.api.dto.instance.relation.AddRelationRequest


loggerApi.info("&lt;&lt;Change attributes: start")

purpose_type = string2Uuid(purpose_for_access)
business_unit_affiliation_type = string2Uuid(businessUnitAffiliationAttributeTypeUuid)
business_justification_type = string2Uuid(uuid_business_justification)
business_justification_pii_type = string2Uuid(uuid_business_justification_pii)

def pii_changed = ""

//Asset usage = assetApi.getAsset(dataSetDataUsage)
Asset ticket = assetApi.getAsset(execution.getVariable("newIssueUuid"))


//Tools planning to use
/*
 - check the old selected tools: Are they still selected
			 if not: Remove
			 if yes: leave
 - check the new selected tools: Are they already mentioned as an attribute
			 - if not: Add
			 - if yes: leave
*/

//Check the old tools
attributeApi.findAttributes(FindAttributesRequest.builder()
	.assetId(ticket.getId())
	.typeIds([string2Uuid(uuid_used_tools)])
	.build()
	).getResults().each{
		old_tool -&gt;
		
		if (!tools_planning_to_use.contains(old_tool.getValue()))
		{
				attributeApi.removeAttribute(old_tool.getId())
				//loggerApi.info("--delete:" + old_tool.getValue() )
		}
}

//Check the new tools
tools_planning_to_use.split(",").each
	{
	new_tool -&gt; loggerApi.info("--new_tool:" + new_tool)
		
		def old_tool_string = ""
		
		//Check if the new tool was already part of the old tools
		attributeApi.findAttributes(FindAttributesRequest.builder()
			.assetId(ticket.getId())
			.typeIds([string2Uuid(uuid_used_tools)])
			.build()).getResults().each
			{
		
				old_tool -&gt;
				old_tool_string = old_tool_string + old_tool.getValue() + ","
			}
		
		if(!old_tool_string.contains(new_tool))
		{
			//add a new tool
			attributeApi.addAttribute(AddAttributeRequest.builder()
										.assetId(ticket.getId())
										.typeId([string2Uuid(uuid_used_tools)])
										.value(new_tool)
										.build())
		}
		
			
	}
//PII Columns
/*
	 - Check if there are PII Columns
				 if not: remove all existing relations and stop check
	 - check the old selected PII Columns: Are they still selected
				 if not: Remove
				 if yes: leave
	 - check the new selected tools: Are they already mentioned as an attribute
				 - if not: Add
				 - if yes: leave
*/
		
//Requires PII
if (!includesPII)
	{
		//loggerApi.info("---no binding")
		
		//No PII Columns; Remove all relations if they exists
		relationApi.findRelations(FindRelationsRequest.builder()
														.relationTypeId(string2Uuid(uuid_relation_include_pii_column))
														.sourceId(ticket.getId())
														.build()).getResults().each
				{
					targetRelation -&gt;
					//loggerApi.info("---targetRelation to remove:" + targetRelation.getId())
		
					
					relationApi.removeRelation(targetRelation.getId())
					pii_changed = "changed"
				}
		
	}
	else
	{
		//if old relations are not longer selected; then we remove them
		relationApi.findRelations(FindRelationsRequest.builder()
			.relationTypeId(string2Uuid(uuid_relation_include_pii_column))
			.sourceId(ticket.getId())
			.build()).getResults().each
				{
				old_relations -&gt; loggerApi.info("---old_relations:" + old_relations)
				
				if(!dynamic_pii_column_checkbox.contains(uuid2String(old_relations.getTarget().getId())))
						{
							relationApi.removeRelation(old_relations.getId())
							pii_changed = "changed"
						}
				}
		
				
		//If new relations are selected;and it doesn't exist, then we add them
		if (dynamic_pii_column_checkbox != "")
		{
			dynamic_pii_column_checkbox.split(",").each
			{
				target_column -&gt;
				
				loggerApi.info("---target_column:"+ target_column)
				
				if (!relationApi.findRelations(FindRelationsRequest.builder()
					.relationTypeId(string2Uuid(uuid_relation_include_pii_column))
					.sourceId(ticket.getId())
					.targetId(string2Uuid(target_column))
					.build()).getResults())
				{
					relationApi.addRelation(AddRelationRequest.builder()
											.sourceId(ticket.getId())
											.targetId(string2Uuid(target_column))
											.typeId(string2Uuid(uuid_relation_include_pii_column))
											.build())
					pii_changed = "changed"
				}
				
				
			}
		}
		
					
	}

//Update status (approval pending)
status_approval_pending = string2Uuid(approvalPendingStatusTypeUuid)
assetApi.changeAsset(ChangeAssetRequest.builder().statusId(status_approval_pending).id(newIssueUuid).build())


//function that will update the attributes
def setTextAttribute(Asset asset,attribute_uuid,value)
	{
		
		if(!attributeApi.findAttributes(FindAttributesRequest.builder()
					.assetId(asset.getId())
					.typeIds([attribute_uuid])
					.build()
					).getResults().isEmpty())
				{
				def existingAttributeId = attributeApi.findAttributes(FindAttributesRequest.builder()
											.assetId(asset.getId())
											.typeIds([attribute_uuid])
											.build()
											).getResults().get(0).getId()
						
						
						attributeApi.changeAttribute(ChangeAttributeRequest.builder()
									.id(existingAttributeId)
									.value(value)
									.build())
				}
		else
				{
					
				//loggerApi.info("add attribute:" + attribute_uuid)
				attributeApi.addAttribute(AddAttributeRequest.builder().assetId(asset.getId()).typeId(attribute_uuid).value(value).build())
				}
	}
	
//Add attributes
//Request Reason
setTextAttribute(ticket,purpose_type,execution.getVariable("dataSetDataUsageRequestReason").toString())

//BusinessUnitAffiliation
setTextAttribute(ticket,business_unit_affiliation_type,execution.getVariable("dataSetDataUsageBusinessUnit").toString())

//BusinessJustification
setTextAttribute(ticket,business_justification_type,execution.getVariable("business_justification").toString())

//BusinessJustificationPII
if (execution.getVariable("bus_justification_pii"))
{
	setTextAttribute(ticket,business_justification_pii_type,execution.getVariable("bus_justification_pii").toString())
}

//Compose a message to show at the end of this workflow
message = 'Your access requests have been logged as tickets. You can check the progress of your tickets &lt;a href="' + applicationApi.getInfo().getBaseUrl() + 'data-helpdesk?view=' + uuid_data_helpdesk_view + '" target="_blank"&gt;here&lt;/a&gt;...'

//commit some attributes
execution.setVariable("message", message)
execution.setVariable("pii_changed", pii_changed)


loggerApi.info("&lt;&lt;Change attributes: end")
</script>
    </scriptTask>
    <sequenceFlow id="flow127" sourceRef="changeAttributes" targetRef="approval_process"></sequenceFlow>
    <exclusiveGateway id="exclusivegateway5" name="Exclusive Gateway"></exclusiveGateway>
    <sequenceFlow id="flow97" sourceRef="exclusivegateway5" targetRef="dataSetAccessRequestPII">
      <documentation>${validation_message != "" &amp;&amp; next}</documentation>
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${validation_message != "" && submit}]]></conditionExpression>
    </sequenceFlow>
    <exclusiveGateway id="exclusivegateway6" name="Exclusive Gateway"></exclusiveGateway>
    <sequenceFlow id="flow98" sourceRef="exclusivegateway6" targetRef="dataSetAccessRequest">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${validation_message != "" && submit}]]></conditionExpression>
    </sequenceFlow>
    <scriptTask id="validate_with_pii" name="validate with pii" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>loggerApi.info("&lt;&lt;validate with PII : start")

def validation_message = ""
execution.setVariable("validation_message","")

//Purpose for Access
if (dataSetDataUsageRequestReason =="")
	{
		validation_message = '&lt;b&gt;Note: &lt;br&gt;&lt;/b&gt;&lt;u&gt;Purpose for Access&lt;/u&gt; is a mandatory field, please fill in a value.&lt;br&gt;'
		execution.setVariable("validation_message",validation_message)
	}

//Business Justification
if (business_justification.toString() =="")
	{
		validation_message = '&lt;b&gt;Note: &lt;br&gt;&lt;/b&gt;&lt;u&gt;Business Justification&lt;/u&gt; is a mandatory field, please fill in a value.&lt;br&gt;'
		execution.setVariable("validation_message",validation_message)
	}

//Tools I am planning to use
if (tools_planning_to_use =="")
	{
		validation_message = '&lt;b&gt;Note: &lt;br&gt;&lt;/b&gt;&lt;u&gt;Tools I am planning to use&lt;/u&gt; is a mandatory field, please select at least 1 tool.&lt;br&gt;'
		execution.setVariable("validation_message",validation_message)
	}

//Business Unit Affiliation
if (dataSetDataUsageBusinessUnit =="")
	{
		validation_message = '&lt;b&gt;Note: &lt;br&gt;&lt;/b&gt;&lt;u&gt;Business Unit Affiliation&lt;/u&gt; is a mandatory field, please fill in a value.&lt;br&gt;'
		execution.setVariable("validation_message",validation_message)
	}


//Business Justification for Requesting Access to PII
if (dynamic_pii_column_checkbox.size() &gt; 0 &amp;&amp; bus_justification_pii.toString() =="")
	{
		validation_message = '&lt;b&gt;Note: &lt;br&gt;&lt;/b&gt;&lt;u&gt;Business Justification for Requesting Access to PII&lt;/u&gt; is a mandatory field (if you want to access PII), please fill in a value.&lt;br&gt;'
		execution.setVariable("validation_message",validation_message)
	}
	


if (dynamic_regular_policy_map.size() &gt; chk_questions.split(",").size() || chk_questions == "")
	{
		validation_message = '&lt;b&gt;Note: &lt;br&gt;&lt;/b&gt;&lt;u&gt;Policies&lt;/u&gt; should all be accepted; Please accept them before you continue.&lt;br&gt;'
		execution.setVariable("validation_message",validation_message)
	}
	
//pii policy
if (dynamic_pii_policy_map.size() &gt; chk_pii.split(",").size() &amp;&amp; chk_pii !=""  )
		{
			validation_message = '&lt;b&gt;Note: &lt;br&gt;&lt;/b&gt;&lt;u&gt;Privacy Policies&lt;/u&gt; should be accepted (if you want to access PII), Please accept them before you continue.&lt;br&gt;'
			execution.setVariable("validation_message",validation_message)
		}
	
loggerApi.info("&lt;&lt;validate with PII: end")</script>
    </scriptTask>
    <sequenceFlow id="flow95" sourceRef="validate_with_pii" targetRef="exclusivegateway5"></sequenceFlow>
    <userTask id="dataSetAccessRequestPII" name="Data Set Request form: ${assetApi.getAsset(dataset).getName()}" activiti:candidateUsers="user(${requester})">
      <documentation>&lt;span style="color: #ff0000;"&gt;${validation_message}&lt;/span&gt;&lt;br&gt;</documentation>
      <extensionElements>
        <activiti:formProperty id="dataSetDataUsageRequestReason" name="Purpose for Access &lt;font color=&quot;red&quot;&gt; * &lt;/font&gt;" type="dynamicEnum" writable="false">
          <activiti:value id="dynamicValuesExpression" name="${dynamic_list_purpose_for_access}"></activiti:value>
        </activiti:formProperty>
        <activiti:formProperty id="business_justification" name="Business Justification&lt;font color=&quot;red&quot;&gt; * &lt;/font&gt;" type="textarea"></activiti:formProperty>
        <activiti:formProperty id="tools_planning_to_use" name="Tools I am planning to use&lt;font color=&quot;red&quot;&gt; * &lt;/font&gt;" type="dynamicCheckbox" writable="false">
          <activiti:value id="dynamicValuesExpression" name="${dynamiclist_of_tools}"></activiti:value>
        </activiti:formProperty>
        <activiti:formProperty id="dataSetDataUsageBusinessUnit" name="Business Unit Affiliation &lt;font color=&quot;red&quot;&gt; * &lt;/font&gt;" type="dynamicEnum" writable="false">
          <activiti:value id="dynamicValuesExpression" name="${dynamic_list_business_unit_affiliation}"></activiti:value>
        </activiti:formProperty>
        <activiti:formProperty id="chk_questions" name="I have read and accept: &lt;font color=&quot;red&quot;&gt; * &lt;/font&gt;" type="dynamicCheckbox">
          <activiti:value id="dynamicValuesExpression" name="${dynamic_regular_policy_map}"></activiti:value>
        </activiti:formProperty>
        <activiti:formProperty id="dynamic_pii_column_checkbox" name="&lt;hr&gt;&lt;b&gt;Data Set ${assetApi.getAsset(dataset).getName()} contains personally Identifiable Information&lt;/b&gt;&lt;br&gt;&lt;br&gt;Access to Personally Identifiable Information requires additional justification and manual approval steps and will delay your access to this data set. You can also access this data set without PII by not selecting any column.&lt;br&gt;&lt;br&gt;" type="dynamicCheckbox" writable="false">
          <activiti:value id="dynamicValuesExpression" name="${dynamic_pii_column_map}"></activiti:value>
        </activiti:formProperty>
        <activiti:formProperty id="bus_justification_pii" name="Business Justification for Requesting Access to PII" type="textarea"></activiti:formProperty>
        <activiti:formProperty id="chk_pii" name="I have read and accept:" type="dynamicCheckbox">
          <activiti:value id="dynamicValuesExpression" name="${dynamic_pii_policy_map}"></activiti:value>
        </activiti:formProperty>
        <activiti:formProperty id="submit" name="Submit" type="button"></activiti:formProperty>
      </extensionElements>
    </userTask>
    <sequenceFlow id="flow94" sourceRef="dataSetAccessRequestPII" targetRef="validate_with_pii"></sequenceFlow>
    <scriptTask id="validate_without_pii" name="validate without pii" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>loggerApi.info("&lt;&lt;validate without PII : start")

def validation_message = ""
execution.setVariable("validation_message","")

//Purpose for Access
if (dataSetDataUsageRequestReason =="")
	{
		validation_message = '&lt;b&gt;Note: &lt;br&gt;&lt;/b&gt;&lt;u&gt;Purpose for Access&lt;/u&gt; is a mandatory field, please fill in a value.&lt;br&gt;'
		execution.setVariable("validation_message",validation_message)
	}

//Business Justification
if (business_justification.toString() =="")
	{
		validation_message = '&lt;b&gt;Note: &lt;br&gt;&lt;/b&gt;&lt;u&gt;Business Justification&lt;/u&gt; is a mandatory field, please fill in a value.&lt;br&gt;'
		execution.setVariable("validation_message",validation_message)
	}

//Tools I am planning to use
if (tools_planning_to_use =="")
	{
		validation_message = '&lt;b&gt;Note: &lt;br&gt;&lt;/b&gt;&lt;u&gt;Tools I am planning to use&lt;/u&gt; is a mandatory field, please select at least 1 tool.&lt;br&gt;'
		execution.setVariable("validation_message",validation_message)
	}


//Business Unit Affiliation
if (dataSetDataUsageBusinessUnit =="")
	{
		validation_message = '&lt;b&gt;Note: &lt;br&gt;&lt;/b&gt;&lt;u&gt;Business Unit Affiliation&lt;/u&gt; is a mandatory field, please fill in a value.&lt;br&gt;'
		execution.setVariable("validation_message",validation_message)
	}

//policies
if (dynamic_regular_policy_map.size() &gt; chk_questions.split(",").size() || chk_questions == "")
	{
		validation_message = '&lt;b&gt;Note: &lt;br&gt;&lt;/b&gt;&lt;u&gt;Policies&lt;/u&gt; should all be accepted; Please accept them before you continue.&lt;br&gt;'
		execution.setVariable("validation_message",validation_message)
	}

//pii
execution.setVariable("chk_pii",false)
	
loggerApi.info("&lt;&lt;validate without PII: end")</script>
    </scriptTask>
    <sequenceFlow id="flow96" sourceRef="validate_without_pii" targetRef="exclusivegateway6"></sequenceFlow>
    <userTask id="dataSetAccessRequest" name="Data Set Request form: ${assetApi.getAsset(dataset).getName()}" activiti:candidateUsers="user(${requester})">
      <documentation>&lt;span style="color: #ff0000;"&gt;${validation_message}&lt;/span&gt;&lt;br&gt;</documentation>
      <extensionElements>
        <activiti:formProperty id="dataSetDataUsageRequestReason" name="Purpose for Access &lt;font color=&quot;red&quot;&gt; * &lt;/font&gt;" type="dynamicEnum" writable="false">
          <activiti:value id="dynamicValuesExpression" name="${dynamic_list_purpose_for_access}"></activiti:value>
        </activiti:formProperty>
        <activiti:formProperty id="business_justification" name="Business Justification&lt;font color=&quot;red&quot;&gt; * &lt;/font&gt;" type="textarea"></activiti:formProperty>
        <activiti:formProperty id="tools_planning_to_use" name="Tools I am planning to use&lt;font color=&quot;red&quot;&gt; * &lt;/font&gt;" type="dynamicCheckbox" writable="false">
          <activiti:value id="dynamicValuesExpression" name="${dynamiclist_of_tools}"></activiti:value>
        </activiti:formProperty>
        <activiti:formProperty id="dataSetDataUsageBusinessUnit" name="Business Unit Affiliation &lt;font color=&quot;red&quot;&gt; * &lt;/font&gt;" type="dynamicEnum" writable="false">
          <activiti:value id="dynamicValuesExpression" name="${dynamic_list_business_unit_affiliation}"></activiti:value>
        </activiti:formProperty>
        <activiti:formProperty id="chk_questions" name="I have read and accept: &lt;font color=&quot;red&quot;&gt; * &lt;/font&gt;" type="dynamicCheckbox">
          <activiti:value id="dynamicValuesExpression" name="${dynamic_regular_policy_map}"></activiti:value>
        </activiti:formProperty>
        <activiti:formProperty id="submit" name="Submit" type="button"></activiti:formProperty>
      </extensionElements>
    </userTask>
    <sequenceFlow id="flow93" sourceRef="dataSetAccessRequest" targetRef="validate_without_pii"></sequenceFlow>
    <exclusiveGateway id="exclusivegateway4" name="Exclusive Gateway"></exclusiveGateway>
    <sequenceFlow id="flow89" sourceRef="exclusivegateway4" targetRef="dataSetAccessRequestPII">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${includesPII}]]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flow90" sourceRef="exclusivegateway4" targetRef="dataSetAccessRequest">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${!includesPII}]]></conditionExpression>
    </sequenceFlow>
    <scriptTask id="init_variables_loop" name="Init Variables Loop" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>import com.collibra.dgc.core.api.dto.instance.attribute.FindAttributesRequest
import com.collibra.dgc.core.api.dto.instance.relation.FindRelationsRequest
import com.collibra.dgc.core.api.dto.instance.responsibility.FindResponsibilitiesRequest

loggerApi.info("&lt;&lt;Init Variables Loop: start")

//Compose a name for the ticket: DatasetName_userName_date_nr
def dataset = execution.getVariable("dataset")

loggerApi.info("&lt;&lt;dataset: " + dataset)
loggerApi.info("&lt;&lt;newIssueUuid: " + newIssueUuid)

def dataset_name = assetApi.getAsset(dataset).getName()
def user_name = userApi.getUserByUsername(requester).getFirstName() + " " + userApi.getUserByUsername(requester).getLastName()

def includesPII = false
def validation_message = ""
def dynamic_regular_policy_map = [:]
def dynamic_pii_column_map = [:]
def dynamic_pii_policy_map = [:]
def pii_policy_map = [:]
def dataOwner = ""



def selected_dynamic_pii_column_checkbox = []
def dynamic_pii_column_checkbox = []

execution.setVariable("dynamic_policy_map", [:])
execution.setVariable("validation_message", validation_message)



def get_value(asset_uuid,attribute_type_uuid,type){
	def value = ""

	if(!attributeApi.findAttributes(FindAttributesRequest.builder()
											.assetId(asset_uuid)
											.typeIds([string2Uuid(attribute_type_uuid)])
											.build()
											).getResults().isEmpty())
				{
					if (type=="array")
					{
						
					attributeApi.findAttributes(FindAttributesRequest.builder()
																		.assetId(asset_uuid)
																		.typeIds([string2Uuid(attribute_type_uuid)])
																		.build()
																		).getResults().each{
						
							result -&gt; loggerApi.info("result: " + result.getValue())
							value = value + result.getValue().toString().replace("[","").replace("]","").replace(" ","") + ","
							}
					
						if (value.length()&gt;0)
							{
								value = value.substring(0,value.length()-1)
							}
					}
					else
					{
					value = attributeApi.findAttributes(FindAttributesRequest.builder()
																		.assetId(asset_uuid)
																		.typeIds([string2Uuid(attribute_type_uuid)])
																		.build()
																		).getResults().get(0).getValue()
					}
				}
	return value
	}


//get the values as preparation for the edit of the ticket
//Purpose for access
dataSetDataUsageRequestReason = get_value(newIssueUuid,purpose_for_access,"")
execution.setVariable("dataSetDataUsageRequestReason",dataSetDataUsageRequestReason)

//Business Justification
business_justification = get_value(newIssueUuid,uuid_business_justification,"")
execution.setVariable("business_justification",business_justification)

//Business Unit
dataSetDataUsageBusinessUnit = get_value(newIssueUuid,businessUnitAffiliationAttributeTypeUuid,"")
execution.setVariable("dataSetDataUsageBusinessUnit",dataSetDataUsageBusinessUnit)

//bus_justification_pii
bus_justification_pii = get_value(newIssueUuid,uuid_business_justification_pii,"")
execution.setVariable("bus_justification_pii",bus_justification_pii)

//tools planning to use
tools_planning_to_use = get_value(newIssueUuid,uuid_used_tools,"array")
loggerApi.info("--tools_planning_to_use:" + tools_planning_to_use)
execution.setVariable("tools_planning_to_use",tools_planning_to_use)

//PII_columns
selected_dynamic_pii_column_checkbox =  relationApi.findRelations(FindRelationsRequest.builder()
														.relationTypeId(string2Uuid("f979adb6-68ab-474e-bf3c-80eaaef189dd"))
														.sourceId(newIssueUuid)
														.build()
														).getResults()
														
selected_dynamic_pii_column_checkbox
loggerApi.info("--source_id:" + newIssueUuid)
loggerApi.info("--selected_dynamic_pii_column_checkbox:" + selected_dynamic_pii_column_checkbox)

selected_dynamic_pii_column_checkbox.each{
	selected_column -&gt; dynamic_pii_column_checkbox.add(selected_column.getTarget().getId())
}

execution.setVariable("dynamic_pii_column_checkbox", dynamic_pii_column_checkbox.toString().replace("[","").replace("]","").replace(" ",""))

//Related policies: Governed by policy
def existingPolicies = relationApi.findRelations(FindRelationsRequest.builder()
															.relationTypeId(string2Uuid(uuid_applies_to_governed_by_relation))
															.targetId(assetApi.getAsset(dataset).getId())
															.build()
															).getResults()
															
if (existingPolicies.size() &gt; 0)
{
existingPolicies.each{
	policy -&gt; loggerApi.info("--policy: " + policy)

	//Is the policy related to PII
	if(!attributeApi.findAttributes(FindAttributesRequest.builder()
							.assetId(policy.getSource().getId())
							.typeIds([string2Uuid(uuid_policy_covers_pii)])
							.build()
							).getResults().isEmpty())
		{
			if (attributeApi.findAttributes(FindAttributesRequest.builder()
													.assetId(policy.getSource().getId())
													.typeIds([string2Uuid(uuid_policy_covers_pii)])
													.build()).getResults().get(0).getValue() == true)

				{
				//PII Policy
				dynamic_pii_policy_map.put(uuid2String(policy.getSource().getId()),"&lt;a href="+applicationApi.getInfo().getBaseUrl()+"asset/" + uuid2String(policy.getSource().getId()) + " target='_blank'&gt;" + policy.getSource().getName() + "&lt;/a&gt;")
				execution.setVariable("dynamic_pii_policy_map", dynamic_pii_policy_map)
				}
			else
				{
				//regular policy
				dynamic_regular_policy_map.put(uuid2String(policy.getSource().getId()),"&lt;a href="+ applicationApi.getInfo().getBaseUrl() + "asset/" + uuid2String(policy.getSource().getId()) + " target='_blank'&gt;" + policy.getSource().getName() + "&lt;/a&gt;")
				execution.setVariable("dynamic_regular_policy_map", dynamic_regular_policy_map)
				}
		}
		else
			{
			//regular policy
			dynamic_regular_policy_map.put(uuid2String(policy.getSource().getId()),"&lt;a href="+ applicationApi.getInfo().getBaseUrl() +"asset/" + uuid2String(policy.getSource().getId()) + " target='_blank'&gt;" + policy.getSource().getName() + "&lt;/a&gt;")
			execution.setVariable("dynamic_regular_policy_map", dynamic_regular_policy_map)
			}
	}
}

//Get the dataowner of the dataset
if (responsibilityApi.findResponsibilities(FindResponsibilitiesRequest.builder()
										.resourceIds([assetApi.getAsset(dataset).getId()])
										.roleIds([string2Uuid(uuid_data_owner_responsibility)]) //data owner
										.build()
										).getResults().size() &gt; 0 )
{
def assignedResponsibilities = responsibilityApi.findResponsibilities(FindResponsibilitiesRequest.builder()
										.resourceIds([assetApi.getAsset(dataset).getId()])
										.roleIds([string2Uuid(uuid_data_owner_responsibility)]) //data owner
										.build()
										).getResults().get(0)
assignedResponsibilities.each
	{
	assignedResponsibility -&gt; dataOwner = userApi.getUser(assignedResponsibility.getOwner().getId()).getUserName()
	}
}

//get the list of related columns to the dataset
def existingDataElements = relationApi.findRelations(FindRelationsRequest.builder()
															.relationTypeId(string2Uuid("00000000-0000-0000-0000-000000007062"))
															.sourceId(dataset)
															.build()
															).getResults()
															
existingDataElements.each
 {
	data_element -&gt; loggerApi.info("--data element: " + data_element.getTarget().getName())
	 
	//Is the data element related to PII
	if(!attributeApi.findAttributes(FindAttributesRequest.builder()
							.assetId(data_element.getTarget().getId())
							.typeIds([string2Uuid("00000000-0000-0000-0001-000500000029")])//Personal Identifiable information
							.build()
							).getResults().isEmpty())
		{
			if (attributeApi.findAttributes(FindAttributesRequest.builder()
													.assetId(data_element.getTarget().getId())
													.typeIds([string2Uuid("00000000-0000-0000-0001-000500000029")])
													.build()).getResults().get(0).getValue() == true)

				{
				//fill dynamic PII column map
				dynamic_pii_column_map.put(uuid2String(data_element.getTarget().getId()),"&lt;a href="+applicationApi.getInfo().getBaseUrl()+"asset/" + uuid2String(data_element.getTarget().getId()) + " target='_blank'&gt;" + assetApi.getAsset(data_element.getTarget().getId()).getDisplayName() + "&lt;/a&gt;")
				execution.setVariable("dynamic_pii_column_map", dynamic_pii_column_map)
				includesPII = true

				}
		}
	}


//Get the list of tools
def dynamiclist_of_tools = [:]
attributeTypeApi.getAttributeType(string2Uuid(uuid_used_tools)).getAllowedValues().each{
	tool -&gt; dynamiclist_of_tools.put(tool,tool)
}

//Get the list of purpose for access
def dynamic_list_purpose_for_access = [:]
attributeTypeApi.getAttributeType(string2Uuid(purpose_for_access)).getAllowedValues().each{
	purpose -&gt; dynamic_list_purpose_for_access.put(purpose,purpose)
}

//Get the list of business unit affiliation
def dynamic_list_business_unit_affiliation = [:]
attributeTypeApi.getAttributeType(string2Uuid(businessUnitAffiliationAttributeTypeUuid)).getAllowedValues().each{
	business_unit_affiliation -&gt; dynamic_list_business_unit_affiliation.put(business_unit_affiliation,business_unit_affiliation)
}

execution.setVariable("dynamic_list_purpose_for_access",dynamic_list_purpose_for_access)
execution.setVariable("dynamic_list_business_unit_affiliation",dynamic_list_business_unit_affiliation)
execution.setVariable("dynamiclist_of_tools",dynamiclist_of_tools)

execution.setVariable("dynamic_pii_column_map",dynamic_pii_column_map)
execution.setVariable("dataOwner", dataOwner)
execution.setVariable("includesPII", includesPII)
loggerApi.info("--Does the dataset contain PII: " + includesPII)
	
	
loggerApi.info("&lt;&lt;Init Variables Loop: end")</script>
    </scriptTask>
    <sequenceFlow id="flow91" sourceRef="init_variables_loop" targetRef="exclusivegateway4"></sequenceFlow>
    <sequenceFlow id="flow130" sourceRef="init_variables" targetRef="init_variables_loop"></sequenceFlow>
    <sequenceFlow id="flow131" sourceRef="exclusivegateway5" targetRef="changeAttributes">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${validation_message == "" && submit}]]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flow132" sourceRef="exclusivegateway6" targetRef="changeAttributes">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${validation_message == "" && submit}]]></conditionExpression>
    </sequenceFlow>
    <scriptTask id="create_message" name="Create message" scriptFormat="groovy" activiti:autoStoreVariables="false">
      <script>loggerApi.info("&lt;&lt;create message: start")

message = 'Your access requests have been logged as tickets. You can check the progress of your tickets &lt;a href="' + applicationApi.getInfo().getBaseUrl() + 'data-helpdesk?view=' + uuid_data_helpdesk_view + '" target="_blank"&gt;here&lt;/a&gt;...'
execution.setVariable("message", message)
loggerApi.info("--message:" + message )

loggerApi.info("&lt;&lt;create message: end")</script>
    </scriptTask>
    <sequenceFlow id="flow135" sourceRef="create_message" targetRef="data_access_ticket"></sequenceFlow>
    <sequenceFlow id="flow136" sourceRef="approval_process" targetRef="create_message"></sequenceFlow>
  </process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_Collaboration">
    <bpmndi:BPMNPlane bpmnElement="Collaboration" id="BPMNPlane_Collaboration">
      <bpmndi:BPMNShape bpmnElement="edit_request_assets_access" id="BPMNShape_edit_request_assets_access">
        <omgdc:Bounds height="351.0" width="2181.0" x="0.0" y="190.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="lane1" id="BPMNShape_lane1">
        <omgdc:Bounds height="351.0" width="2161.0" x="20.0" y="190.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="startevent1" id="BPMNShape_startevent1">
        <omgdc:Bounds height="35.0" width="35.0" x="70.0" y="294.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="init_variables" id="BPMNShape_init_variables">
        <omgdc:Bounds height="60.0" width="105.0" x="140.0" y="282.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="data_access_ticket" id="BPMNShape_data_access_ticket">
        <omgdc:Bounds height="60.0" width="105.0" x="1940.0" y="282.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="boundarytimer1" id="BPMNShape_boundarytimer1">
        <omgdc:Bounds height="30.0" width="30.0" x="2020.0" y="320.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="endevent5" id="BPMNShape_endevent5">
        <omgdc:Bounds height="35.0" width="35.0" x="2100.0" y="294.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="approval_process" id="BPMNShape_approval_process">
        <omgdc:Bounds height="71.0" width="105.0" x="1480.0" y="276.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="changeAttributes" id="BPMNShape_changeAttributes">
        <omgdc:Bounds height="60.0" width="105.0" x="1300.0" y="282.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="exclusivegateway5" id="BPMNShape_exclusivegateway5">
        <omgdc:Bounds height="40.0" width="40.0" x="1050.0" y="238.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="exclusivegateway6" id="BPMNShape_exclusivegateway6">
        <omgdc:Bounds height="40.0" width="40.0" x="1050.0" y="367.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="validate_with_pii" id="BPMNShape_validate_with_pii">
        <omgdc:Bounds height="55.0" width="105.0" x="880.0" y="231.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="dataSetAccessRequestPII" id="BPMNShape_dataSetAccessRequestPII">
        <omgdc:Bounds height="70.0" width="105.0" x="720.0" y="224.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="validate_without_pii" id="BPMNShape_validate_without_pii">
        <omgdc:Bounds height="70.0" width="105.0" x="890.0" y="353.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="dataSetAccessRequest" id="BPMNShape_dataSetAccessRequest">
        <omgdc:Bounds height="70.0" width="105.0" x="720.0" y="353.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="exclusivegateway4" id="BPMNShape_exclusivegateway4">
        <omgdc:Bounds height="40.0" width="40.0" x="600.0" y="291.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="init_variables_loop" id="BPMNShape_init_variables_loop">
        <omgdc:Bounds height="70.0" width="105.0" x="350.0" y="277.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="create_message" id="BPMNShape_create_message">
        <omgdc:Bounds height="55.0" width="105.0" x="1780.0" y="284.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge bpmnElement="flow66" id="BPMNEdge_flow66">
        <omgdi:waypoint x="105.0" y="311.0"></omgdi:waypoint>
        <omgdi:waypoint x="140.0" y="312.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow117" id="BPMNEdge_flow117">
        <omgdi:waypoint x="2045.0" y="312.0"></omgdi:waypoint>
        <omgdi:waypoint x="2100.0" y="311.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow119" id="BPMNEdge_flow119">
        <omgdi:waypoint x="2050.0" y="335.0"></omgdi:waypoint>
        <omgdi:waypoint x="2100.0" y="311.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow127" id="BPMNEdge_flow127">
        <omgdi:waypoint x="1405.0" y="312.0"></omgdi:waypoint>
        <omgdi:waypoint x="1480.0" y="311.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow97" id="BPMNEdge_flow97">
        <omgdi:waypoint x="1070.0" y="278.0"></omgdi:waypoint>
        <omgdi:waypoint x="1069.0" y="303.0"></omgdi:waypoint>
        <omgdi:waypoint x="774.0" y="303.0"></omgdi:waypoint>
        <omgdi:waypoint x="772.0" y="294.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow98" id="BPMNEdge_flow98">
        <omgdi:waypoint x="1070.0" y="367.0"></omgdi:waypoint>
        <omgdi:waypoint x="1070.0" y="332.0"></omgdi:waypoint>
        <omgdi:waypoint x="773.0" y="332.0"></omgdi:waypoint>
        <omgdi:waypoint x="772.0" y="353.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow95" id="BPMNEdge_flow95">
        <omgdi:waypoint x="985.0" y="258.0"></omgdi:waypoint>
        <omgdi:waypoint x="1050.0" y="258.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow94" id="BPMNEdge_flow94">
        <omgdi:waypoint x="825.0" y="259.0"></omgdi:waypoint>
        <omgdi:waypoint x="880.0" y="258.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow96" id="BPMNEdge_flow96">
        <omgdi:waypoint x="995.0" y="388.0"></omgdi:waypoint>
        <omgdi:waypoint x="1050.0" y="387.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow93" id="BPMNEdge_flow93">
        <omgdi:waypoint x="825.0" y="388.0"></omgdi:waypoint>
        <omgdi:waypoint x="890.0" y="388.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow89" id="BPMNEdge_flow89">
        <omgdi:waypoint x="620.0" y="291.0"></omgdi:waypoint>
        <omgdi:waypoint x="619.0" y="251.0"></omgdi:waypoint>
        <omgdi:waypoint x="716.0" y="251.0"></omgdi:waypoint>
        <omgdi:waypoint x="720.0" y="259.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow90" id="BPMNEdge_flow90">
        <omgdi:waypoint x="620.0" y="331.0"></omgdi:waypoint>
        <omgdi:waypoint x="618.0" y="380.0"></omgdi:waypoint>
        <omgdi:waypoint x="715.0" y="380.0"></omgdi:waypoint>
        <omgdi:waypoint x="720.0" y="388.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow91" id="BPMNEdge_flow91">
        <omgdi:waypoint x="455.0" y="312.0"></omgdi:waypoint>
        <omgdi:waypoint x="600.0" y="311.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow130" id="BPMNEdge_flow130">
        <omgdi:waypoint x="245.0" y="312.0"></omgdi:waypoint>
        <omgdi:waypoint x="350.0" y="312.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow131" id="BPMNEdge_flow131">
        <omgdi:waypoint x="1090.0" y="258.0"></omgdi:waypoint>
        <omgdi:waypoint x="1352.0" y="282.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow132" id="BPMNEdge_flow132">
        <omgdi:waypoint x="1070.0" y="367.0"></omgdi:waypoint>
        <omgdi:waypoint x="1352.0" y="342.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow135" id="BPMNEdge_flow135">
        <omgdi:waypoint x="1885.0" y="311.0"></omgdi:waypoint>
        <omgdi:waypoint x="1940.0" y="312.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow136" id="BPMNEdge_flow136">
        <omgdi:waypoint x="1585.0" y="311.0"></omgdi:waypoint>
        <omgdi:waypoint x="1780.0" y="311.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</definitions>